{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web development\\\\rps\\\\frontend\\\\src\\\\components\\\\ExamSelection.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExamSelection = () => {\n  _s();\n  const [exams, setExams] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchExams = async () => {\n      try {\n        // Make API call to fetch exams\n        const response = await axios.get(\"http://localhost:3001/exams\", {\n          withCredentials: true\n        });\n        setExams(response.data.exams); // Store exams in state\n      } catch (err) {\n        var _err$response;\n        // Check for specific error codes or fallback\n        if (err.response) {\n          if (err.response.status === 401) {\n            setError(\"You are not authorized. Please log in first.\");\n          } else {\n            setError(err.response.data.error || \"Failed to load exams. Please try again later.\");\n          }\n        } else {\n          setError(\"Network error. Please check your connection and try again.\");\n        }\n        console.error(\"Error fetching exams:\", ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n      } finally {\n        // Ensure loading spinner is hidden\n        setLoading(false);\n      }\n    };\n    fetchExams();\n  }, []); // Empty dependency array ensures this only runs on component mount\n\n  const handleTakeExam = async examId => {\n    try {\n      // Call the backend to check if the user is blocked\n      const response = await axios.get(`http://localhost:3001/check-blocked/${examId}`, {\n        withCredentials: true // Ensure cookies are sent for authentication\n      });\n      if (response.status === 200) {\n        // If not blocked, navigate to the guideline page\n        navigate(`/guideline/${examId}`);\n      }\n    } catch (err) {\n      if (err.response && err.response.status === 403) {\n        // If blocked, display the blocking reason\n        alert(`You are blocked from taking this exam. Reason: ${err.response.data.reason}`);\n      } else {\n        var _err$response2;\n        // Handle other errors\n        alert(\"An error occurred. Please try again later.\");\n        console.error(\"Error checking blocked status:\", ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || err.message);\n      }\n    }\n  };\n  const handleViewResults = examId => {\n    navigate(`/results`, {\n      state: {\n        examId\n      }\n    });\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading exams...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"mb-4\",\n      children: \"Available Exams\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), exams.map(exam => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card mb-3 p-3 shadow\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: exam.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: exam.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), exam.blocked ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger\",\n        disabled: true,\n        children: \"You are blocked from this exam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this) : exam.completed ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: () => handleViewResults(exam.id),\n        children: \"View Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this) : exam.attempted ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-warning\",\n        disabled: true,\n        children: \"Already Attempted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: () => handleTakeExam(exam.id),\n        children: \"Take Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this)]\n    }, exam.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(ExamSelection, \"GNsRocI5OMtUXq0nFVvLYNZ4QSk=\", false, function () {\n  return [useNavigate];\n});\n_c = ExamSelection;\nexport default ExamSelection;\nvar _c;\n$RefreshReg$(_c, \"ExamSelection\");","map":{"version":3,"names":["React","useEffect","useState","axios","useNavigate","jsxDEV","_jsxDEV","ExamSelection","_s","exams","setExams","loading","setLoading","error","setError","navigate","fetchExams","response","get","withCredentials","data","err","_err$response","status","console","message","handleTakeExam","examId","alert","reason","_err$response2","handleViewResults","state","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","exam","name","description","blocked","disabled","completed","onClick","id","attempted","_c","$RefreshReg$"],"sources":["D:/Web development/rps/frontend/src/components/ExamSelection.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst ExamSelection = () => {\r\n  const [exams, setExams] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchExams = async () => {\r\n      try {\r\n        // Make API call to fetch exams\r\n        const response = await axios.get(\"http://localhost:3001/exams\", { withCredentials: true });\r\n        setExams(response.data.exams); // Store exams in state\r\n      } catch (err) {\r\n        // Check for specific error codes or fallback\r\n        if (err.response) {\r\n          if (err.response.status === 401) {\r\n            setError(\"You are not authorized. Please log in first.\");\r\n          } else {\r\n            setError(err.response.data.error || \"Failed to load exams. Please try again later.\");\r\n          }\r\n        } else {\r\n          setError(\"Network error. Please check your connection and try again.\");\r\n        }\r\n\r\n        console.error(\"Error fetching exams:\", err.response?.data || err.message);\r\n      } finally {\r\n        // Ensure loading spinner is hidden\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchExams();\r\n  }, []); // Empty dependency array ensures this only runs on component mount\r\n\r\n  const handleTakeExam = async (examId) => {\r\n    try {\r\n      // Call the backend to check if the user is blocked\r\n      const response = await axios.get(`http://localhost:3001/check-blocked/${examId}`, {\r\n        withCredentials: true, // Ensure cookies are sent for authentication\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        // If not blocked, navigate to the guideline page\r\n        navigate(`/guideline/${examId}`);\r\n      }\r\n    } catch (err) {\r\n      if (err.response && err.response.status === 403) {\r\n        // If blocked, display the blocking reason\r\n        alert(`You are blocked from taking this exam. Reason: ${err.response.data.reason}`);\r\n      } else {\r\n        // Handle other errors\r\n        alert(\"An error occurred. Please try again later.\");\r\n        console.error(\"Error checking blocked status:\", err.response?.data || err.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleViewResults = (examId) => {\r\n    navigate(`/results`, { state: { examId } });\r\n  };\r\n\r\n  if (loading) {\r\n    return <p>Loading exams...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"text-danger\">{error}</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <h1 className=\"mb-4\">Available Exams</h1>\r\n      {exams.map((exam) => (\r\n        <div key={exam.id} className=\"card mb-3 p-3 shadow\">\r\n          <h5>{exam.name}</h5>\r\n          <p>{exam.description}</p>\r\n\r\n          {/* Handle different exam statuses */}\r\n          {exam.blocked ? (\r\n            <button className=\"btn btn-danger\" disabled>\r\n              You are blocked from this exam\r\n            </button>\r\n          ) : exam.completed ? (\r\n            <button className=\"btn btn-secondary\" onClick={() => handleViewResults(exam.id)}>\r\n              View Results\r\n            </button>\r\n          ) : exam.attempted ? (\r\n            <button className=\"btn btn-warning\" disabled>\r\n              Already Attempted\r\n            </button>\r\n          ) : (\r\n            <button className=\"btn btn-primary\" onClick={() => handleTakeExam(exam.id)}>\r\n              Take Test\r\n            </button>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExamSelection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}